<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.yguilai.com</id>
    <title>燕归来博客</title>
    <updated>2020-06-08T07:37:02.529Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.yguilai.com"/>
    <link rel="self" href="https://blog.yguilai.com/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://blog.yguilai.com/images/avatar.png</logo>
    <icon>https://blog.yguilai.com/favicon.ico</icon>
    <rights>All rights reserved 2020, 燕归来博客</rights>
    <entry>
        <title type="html"><![CDATA[Typescript之封装Axios]]></title>
        <id>https://blog.yguilai.com/post/ojQKZXlfE/</id>
        <link href="https://blog.yguilai.com/post/ojQKZXlfE/">
        </link>
        <updated>2020-06-05T08:50:48.000Z</updated>
        <content type="html"><![CDATA[<p>直接上代码</p>
<h4 id="安装依赖">安装依赖</h4>
<pre><code class="language-bash">yarn add axios # 或者 npm install axios -S
</code></pre>
<h4 id="encapsulation">Encapsulation</h4>
<pre><code class="language-ts">// config/index.ts
export default {
  api: {
    devApiBaseUrl: '/',             // 开发环境base url
    proApiBaseUrl: '/api/v1'   // 生产环境base url
  }
}
</code></pre>
<pre><code class="language-ts">// utils/request.ts
import axios, {AxiosInstance, AxiosRequestConfig, AxiosPromise, AxiosResponse} from 'axios'
import config from '@/config'

const {api: {devApiBaseUrl, proApiBaseUrl}} = config
const apiBaseUrl = process.env.NODE_ENV === 'production' ? proApiBaseUrl : devApiBaseUrl

// 修改默认的content-type
axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'

/**
 * 统一返回的数据格式, 根据具体业务修改
 */
export interface ResponseData {
  code: number
  msg: string
  data?: any
}

class HttpRequest {
  constructor(public baseUrl: string = apiBaseUrl) {
    this.baseUrl = baseUrl
  }

  public request(options: AxiosRequestConfig): AxiosPromise {
    const instance: AxiosInstance = axios.create()
    options = this.mergeConfig(options)
    this.interceptors(instance, options.url)
    return instance(options)
  }

  /**
   * 配置拦截器
   * @param instance
   * @param url
   */
  private interceptors(instance: AxiosInstance, url?: string) {
    instance.interceptors.request.use((config: AxiosRequestConfig) =&gt; {
      // 可以在这配置token 请求头
      return config
    }, error =&gt; Promise.reject(error))

    instance.interceptors.response.use((res: AxiosResponse) =&gt; {
      const {data} = res
      const {code, msg} = data
      // 这里设置返回状态码为0表示成功, 请根据具体业务修改
      if (code !== 0) {
        // TODO 使用消息窗提示错误
        console.error(msg)
      }
      return res
    }, error =&gt; Promise.reject(error))
  }

  /**
   * 合并基础配置
   * @param options
   */
  private mergeConfig(options: AxiosRequestConfig): AxiosRequestConfig {
    return Object.assign({baseURL: this.baseUrl}, options)
  }
}

export default HttpRequest
</code></pre>
<h4 id="how-to-use">How to use</h4>
<pre><code class="language-ts">// api/index.ts
import HttpRequest from &quot;@/utils/request&quot;
export * from '@/utils/request'
export default new HttpRequest()
</code></pre>
<pre><code class="language-ts">// api/user.ts
import axios, {ResponseData} from './index'
import {AxiosPromise} from 'axios'

interface LoginReqArgInterface {
  username: string
  password: number | string
}

// 传入泛型变量ResponseData, 可以在操作返回结果集时, 获得代码提示
export const loginApi = (data: LoginReqArgInterface): AxiosPromise&lt;ResponseData&gt; =&gt; {
  return axios.request({
    url: '/user/login',
    data,
    method: 'POST'
  })
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescript之tsconfig.json配置]]></title>
        <id>https://blog.yguilai.com/post/oiRKwJIS-/</id>
        <link href="https://blog.yguilai.com/post/oiRKwJIS-/">
        </link>
        <updated>2020-06-02T13:28:01.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h3 id="tsconfigjson的可配置项">tsconfig.json的可配置项</h3>
<pre><code class="language-json">{
    &quot;compileOnSave&quot;: true,
    &quot;files&quot;: [],
    &quot;include&quot;: [],
    &quot;exclude&quot;: [],
    &quot;extends&quot;: &quot;&quot;,
    &quot;compilerOptions&quot;: {}
}
</code></pre>
<h3 id="compileonsave"><code>compileOnSave</code></h3>
<p><code>compileOnSave</code>的值是<code>true</code>或<code>false</code>. 如果设为<code>true</code>, 在编辑文件保存的时候, 编辑器会根据<code>tsconfig.json</code>的配置重新生成文件.(需要编辑器支持)</p>
<h3 id="files"><code>files</code></h3>
<p><code>files</code>可以配置一个数组列表, 里面包含指定文件的相对或绝对路径. 编译器在编译ide时候只会编译包含在files中列出的文件. 如果不指定, 则取决于有没有设置<code>include</code>选项; 如果没有<code>include</code>选项, 则默认会编译根目录以及所有子目录的文件. 这里列出的路径必须是指定文件, 而不是某个文件夹, 而且不能使用<code>*</code>、<code>?</code>、<code>**/</code>等通配符</p>
<h3 id="include"><code>include</code></h3>
<p>指定要编译的路径列表，但和 files 的区别在于，这里的路径可以是文件夹，也可以是文件，可以使<br>
用相对和绝对路径，而且可以使用通配符. 比如 &quot;./src&quot; 即表示要编译 src 文件夹下的所有文件以及子文件夹的文件.</p>
<h3 id="exclude"><code>exclude</code></h3>
<p>表示要排除的、不编译的文件，它也可以指定一个列表，规则和 include 一样，可以是文件可以是文件夹, 可以是相对路径或绝对路径，可以使用通配符.</p>
<h3 id="extends"><code>extends</code></h3>
<p>通过指定一个其它的 tsconfig.json 文件路径，来继承这个配置文件里的配置，继承来的文件配置会覆<br>
盖当前文件定义的配置. TS在 3.2版本开始，支持继承一个来自 Node.js包的tsconfig.json 配置文件.</p>
<h3 id="compileroptions"><code>compilerOptions</code></h3>
<p>包含很多可配置项, 用来设置编译选项.</p>
<ul>
<li>
<p>target<br>
用于指定编译之后的版本目标, 可选值有: <code>ES3（默认值）</code>、<code>ES5</code>、<code>ES2015</code>、<code>ES2016</code>、<code>ES2017</code>、<code>ESNEXT</code>. 如果不配置, 则默认使用ES3版本, 如果设为ESNEXT, 则使用最新的ES规范版本.</p>
</li>
<li>
<p>module<br>
用于指定要使用的模块标准, 可选值: <code>commonjs</code>、<code>amd</code>、<code>system</code>、<code>umd</code>、<code>s2015(或写 es6)</code>. 如果不设置module选项, 则判断<code>target</code>选项, 如果<code>target</code>渲染设为<code>ES6</code>, 则module默认为<code>ES6</code>, 否则就是<code>commonjs</code></p>
</li>
<li>
<p>lib<br>
用于指定要包含在编译中的库文件, 如果你要使用一些ES6的新语法, 则需要引入ES6/ES2015这个库, 如果没有指定 lib 配置，默认会加载一些库，而加载什么库是受 target 影响的。如果 target 为ES5，默认包含的库有 DOM、 ES5 和 ScriptHost ；如果 target 是 ES6，默认引入的库有DOM、ES6、DOM.Iterable 和 ScriptHost.</p>
</li>
<li>
<p>allowJs<br>
allowJs 设置的值为 true 或 false，用来指定是否允许编译 JS 文件，默认是 false，即不编译 JS 文件.</p>
</li>
</ul>
<hr>
<p>未完待续...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescript之泛型约束]]></title>
        <id>https://blog.yguilai.com/post/ZUto8nM6t/</id>
        <link href="https://blog.yguilai.com/post/ZUto8nM6t/">
        </link>
        <updated>2020-06-02T11:46:41.000Z</updated>
        <summary type="html"><![CDATA[<p>泛型约束就是使用一个类型和extends对泛型进行约束</p>
]]></summary>
        <content type="html"><![CDATA[<p>泛型约束就是使用一个类型和extends对泛型进行约束</p>
<!-- more -->
<h3 id="泛型约束">泛型约束</h3>
<p>例子:</p>
<pre><code class="language-ts">interface WithLength {
    length: number
}
const getLength = &lt;T extends WithLength&gt;(param: T): number =&gt; {
    return param.length
}
getLength(&quot;abcdefg&quot;)    // 7
getLength([1, 2, 3])        // 3
getLength({ length: 5 }) // 5
getLength(123)             // error 类型“123”的参数不能赋给类型“WithLength”的参数
</code></pre>
<p>从上述例子可以看到, 泛型变量<code>T</code>受到接口<code>WithLenght</code>的约束, 不管它是什么类型, 但必须有一个length属性.</p>
<h3 id="泛型约束中使用类型参数">泛型约束中使用类型参数</h3>
<p>例子:</p>
<pre><code class="language-ts">const getProp = (obj, propName) =&gt; {
    return obj[propName]
}
const obj = { a: 'aaa', b: 'bbb' }
getProp(obj, 'c')   // undefined
</code></pre>
<p>从上面这个例子可以看出, 当获取这个对象的<code>'c'</code>属性时, 就会得到<code>undefined</code>. 这里我们就需要用到索引类型<code>keyof</code>结合泛型来实现对这个问题的检查</p>
<pre><code class="language-ts">const getProp = &lt;T, K extends keyof T&gt;(obj: T, propName: K) =&gt; {
    return obj[propName]
}
const obj = { a: 'aaa', b: 'bbb' }
getProp(obj, 'c')   // 类型“&quot;c&quot;”的参数不能赋给类型“&quot;a&quot; | &quot;b&quot;”的参数
</code></pre>
<blockquote>
<p><code>keyof</code>可以理解为一个由泛型变量<code>T</code>的属性名构成的联合类型, 因此<code>K</code>就被约束为了只能时<code>'a'</code>或<code>'b'</code>, 所传入字符串<code>'c'</code>时, ts就会检测出错误</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescript之类型断言]]></title>
        <id>https://blog.yguilai.com/post/Zwy9o_K7j/</id>
        <link href="https://blog.yguilai.com/post/Zwy9o_K7j/">
        </link>
        <updated>2020-06-01T13:48:50.000Z</updated>
        <summary type="html"><![CDATA[<p>两种写法, 一种是<code>&lt;type&gt;value</code>, 一种是<code>value as type</code></p>
]]></summary>
        <content type="html"><![CDATA[<p>两种写法, 一种是<code>&lt;type&gt;value</code>, 一种是<code>value as type</code></p>
<!-- more -->
<p>例子:</p>
<pre><code class="language-typescript">const getStrLength = (target: string | number): number =&gt; {
    if ((&lt;string&gt;targer).length) {  // 这种写法在jsx中不支持, 同时也是tslint不建议的写法
        return (target as string).length    // 建议写法
    } else {
        return target.toString().length
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescript之ts补充的六个类型]]></title>
        <id>https://blog.yguilai.com/post/zpYjIzrB_/</id>
        <link href="https://blog.yguilai.com/post/zpYjIzrB_/">
        </link>
        <updated>2020-06-01T13:26:04.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h4 id="元组">元组</h4>
<ul>
<li>元组可以看作是数组的拓展, 它表示已知的元素数量和类型的数组</li>
<li>通过<code>let tuple: [string, number, boolean]</code>的方式定义</li>
<li>各个位置上的元素类型都要对应, 元素个数也要一致</li>
</ul>
<h4 id="枚举">枚举</h4>
<ul>
<li>ts在es原有类型鸡出上加入枚举类型</li>
</ul>
<h4 id="any">Any</h4>
<ul>
<li>程序有时是多变的, 有时我们在编写代码时并不能清楚的知道一个值到底时什么类型, 这个时候就需要用到any类型, eg: <code>let dom: any = document.getElementById('myId')</code></li>
<li>可以在定义数组类型时使用any来指定数组中的元素类型为任意类型</li>
<li>不应该滥用any类型, 如果任何值都指定为any类型, 那么typescript就变成了&quot;anyscript&quot;😂</li>
</ul>
<h4 id="void">void</h4>
<ul>
<li>void和any相反, any表示任意类型, void则是表示没有任意类型</li>
<li>定义函数, 没有返回值时常用到</li>
<li>void类型的变量只能赋值为<code>undefined</code>和<code>null</code></li>
</ul>
<h4 id="nerver">nerver</h4>
<ul>
<li>never类型指那些永不存在的类型</li>
<li>除它自身外, 任何类型都不能赋值给never类型</li>
</ul>
<h4 id="unknown">unknown</h4>
<ul>
<li>unknown和any很像, 但是unknown相对与any是安全的</li>
</ul>
<h4 id="拓展类型">拓展类型</h4>
<ul>
<li>交叉类型
<ul>
<li>使用<code>&amp;</code>符号定义, 被<code>&amp;</code>符号链接的多个类型构成一个交叉类型</li>
</ul>
</li>
<li>联合类型
<ul>
<li>联合类型是要求是要符合联合类型中任意一种类型即可, 使用<code>|</code>符号定义</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[yarn create react-app 报错文件名、目录名或卷标语法不正确]]></title>
        <id>https://blog.yguilai.com/post/x1hPVO9h_/</id>
        <link href="https://blog.yguilai.com/post/x1hPVO9h_/">
        </link>
        <updated>2020-05-27T07:29:09.000Z</updated>
        <summary type="html"><![CDATA[<p>最近学习react, 看官方文档利用yarn新建项目运行<code>yarn create react-app my-app</code>直接报错</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近学习react, 看官方文档利用yarn新建项目运行<code>yarn create react-app my-app</code>直接报错</p>
<!-- more -->
<p>看网上解决办法很多都是修改<code>create-react-app.cmd</code>, 然后添加环境变量, 感觉很不<code>优雅</code></p>
<p>查了很多资料后, 发现主要原因是我用npm全局安装的yarn, 导致yarn的bin目录与安装目录在不同分区🙄</p>
<p>查看yarn的bin目录</p>
<pre><code class="language-bash">yarn global bin
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://blog.yguilai.com/post-images/1590565038111.png" alt="" loading="lazy"></figure>
<p>查看yarn的安装目录</p>
<pre><code class="language-bash">yarn global dir
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://blog.yguilai.com/post-images/1590565172092.png" alt="" loading="lazy"></figure>
<blockquote>
<p>这里是我已经修改了的, 原来是在C盘</p>
</blockquote>
<p>如果发现bin目录与安装目录不在同一个分区, 就将yarn的安装位置修改到同一分区</p>
<pre><code class="language-bash">yarn config set global-folder &quot;D:\Develop\yarn\global&quot;
yarn config set cache-folder &quot;D:\Develop\yarn\cache&quot;
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://blog.yguilai.com/post-images/1590565331006.png" alt="" loading="lazy"></figure>
<p>再运行<code>yarn create react-app my-app</code>可以发现已经搞定了👌</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Win10解决无法调节屏幕亮度问题]]></title>
        <id>https://blog.yguilai.com/post/TKVP2Etmw/</id>
        <link href="https://blog.yguilai.com/post/TKVP2Etmw/">
        </link>
        <updated>2020-05-20T12:00:17.000Z</updated>
        <summary type="html"><![CDATA[<p>网上找了很多方法, 如: 重装集显驱动、修改注册表, 都没用</p>
]]></summary>
        <content type="html"><![CDATA[<p>网上找了很多方法, 如: 重装集显驱动、修改注册表, 都没用</p>
<!-- more -->
<p>如果安装了TeamViewer, 向日葵之类的远程控制软件, 会自动安装监视器驱动</p>
<p>解决办法:<br>
Win+R打开运行窗口, 输入<code>devmgmt.msc</code>, 回车打开设备管理器面板, 找到监视器</p>
<p>可以发现监视器驱动显示为<code>PnP-Monitor(Standard)</code> (厂商为TeamViewer) 或者<code>Generic Monitor (orayOPMS)</code>(厂商为向日葵)<br>
<img src="https://blog.yguilai.com/post-images/1589976540518.jpg" alt="" loading="lazy"></p>
<p>右键选中对应驱动, 打开<code>属性</code> &gt; <code>驱动程序</code> &gt; <code>更新驱动程序</code> &gt; <code>浏览计算机以查找驱动程序软件</code> &gt; <code>从计算机的设备驱动程序列表中选取</code> &gt; 选中<code>通用即插即用监视器</code>, 点击下一步安装即可, 最好重启一下电脑</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go日志库Zap与lumberjack配置]]></title>
        <id>https://blog.yguilai.com/post/L_yuiYNgS/</id>
        <link href="https://blog.yguilai.com/post/L_yuiYNgS/">
        </link>
        <updated>2020-05-19T14:20:02.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-go">package core

import (
	&quot;go-gin-api-example/core/global&quot;
	&quot;go.uber.org/zap&quot;
	&quot;go.uber.org/zap/zapcore&quot;
	&quot;gopkg.in/natefinch/lumberjack.v2&quot;
	&quot;os&quot;
	&quot;strings&quot;
)

func initZapLogger() {
	var logger *zap.Logger
	core := zapcore.NewCore(newZapEncoder(), newWriteSyncer(), newZapLevel())

	// set initialize fields
	field := zap.Fields(zap.String(&quot;ApplicationName&quot;, global.CONFIG.App.Name))

	// judge current environment is pro?
	if global.CONFIG.App.Env != &quot;pro&quot; {
		// enable dev mode
		caller := zap.AddCaller()
		development := zap.Development()
		logger = zap.New(core, caller, development, field)
	} else {
		logger = zap.New(core, field)
	}

	// save as a global variable
	global.LOG = logger
}

func newWriteSyncer() zapcore.WriteSyncer {
	if !global.CONFIG.Log.EnableLogFile {
		return zapcore.NewMultiWriteSyncer(zapcore.AddSync(os.Stdout))
	} else {
		logConfig := global.CONFIG.Log
		hook := lumberjack.Logger{
			Filename:   logConfig.File.Path + string(os.PathSeparator) + global.CONFIG.App.Name + &quot;.log&quot;,
			MaxSize:    logConfig.File.MaxSize,
			MaxBackups: logConfig.File.MaxBackups,
			MaxAge:     logConfig.File.MaxAge,
			Compress:   logConfig.File.Compress,
		}
		return zapcore.NewMultiWriteSyncer(zapcore.AddSync(os.Stdout), zapcore.AddSync(&amp;hook))
	}
}

func newZapEncoder() zapcore.Encoder {
	encoderCfg := zapcore.EncoderConfig{
		TimeKey:        &quot;time&quot;,
		LevelKey:       &quot;level&quot;,
		NameKey:        &quot;logger&quot;,
		CallerKey:      &quot;lineNum&quot;,
		MessageKey:     &quot;msg&quot;,
		StacktraceKey:  &quot;stacktrace&quot;,
		LineEnding:     zapcore.DefaultLineEnding,
		EncodeLevel:    zapcore.CapitalLevelEncoder,    // 大写编码器
		EncodeTime:     zapcore.ISO8601TimeEncoder,     // ISO8601 UTC 时间格式
		EncodeDuration: zapcore.SecondsDurationEncoder,
		EncodeCaller:   zapcore.ShortCallerEncoder,     // 短路径编码器
		EncodeName:     zapcore.FullNameEncoder,
	}

	if global.CONFIG.Log.Encoder == &quot;json&quot; {
		return zapcore.NewJSONEncoder(encoderCfg)
	} else {
		return zapcore.NewConsoleEncoder(encoderCfg)
	}
}

func newZapLevel() zap.AtomicLevel {
	levelMap := map[string]zapcore.Level{
		&quot;DEBUG&quot;:  zap.DebugLevel,
		&quot;INFO&quot;:   zap.InfoLevel,
		&quot;WARN&quot;:   zap.WarnLevel,
		&quot;ERROR&quot;:  zap.ErrorLevel,
		&quot;DPANIC&quot;: zap.DPanicLevel,
		&quot;PANIC&quot;:  zap.PanicLevel,
		&quot;FATAL&quot;:  zap.FatalLevel,
	}

	level := zap.NewAtomicLevel()
	if l, ok := levelMap[strings.ToUpper(global.CONFIG.Log.Level)]; ok {
		level.SetLevel(l)
	} else {
		level.SetLevel(zap.InfoLevel)
	}

	return level
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ElementUI自定义上传 -以上传图标到七牛云为例]]></title>
        <id>https://blog.yguilai.com/post/elementui-zi-ding-yi-shang-chuan-yi-shang-chuan-tu-biao-dao-qi-niu-yun-wei-li/</id>
        <link href="https://blog.yguilai.com/post/elementui-zi-ding-yi-shang-chuan-yi-shang-chuan-tu-biao-dao-qi-niu-yun-wei-li/">
        </link>
        <updated>2020-05-19T07:30:51.000Z</updated>
        <summary type="html"><![CDATA[<p>解决ElementUI上传组件无法获取内部文件列表的缺陷</p>
]]></summary>
        <content type="html"><![CDATA[<p>解决ElementUI上传组件无法获取内部文件列表的缺陷</p>
<!-- more -->
<pre><code class="language-html">&lt;template&gt;
    &lt;div&gt;
        &lt;el-upload
            action=&quot;#&quot;
            class=&quot;icon-uploader&quot;
            :auto-upload=&quot;false&quot;
            :on-change=&quot;onIcoUploadChange&quot;
            :show-file-list=&quot;false&quot;
            accept=&quot;image/*&quot;
          &gt;
            &lt;img v-if=&quot;imageUrl !== ''&quot; :src=&quot;imageUrl&quot; class=&quot;ico&quot; /&gt;
            &lt;i v-else class=&quot;el-icon-plus&quot; /&gt;
            &lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;
              只能上传图片文件，且不超过200kb
            &lt;/div&gt;
          &lt;/el-upload&gt;
          &lt;el-button @click=&quot;upload()&quot;&gt;上传&lt;/el-button&gt;
    &lt;/div&gt;
&lt;/ template&gt;

&lt;script&gt;
export default {
    data() {
        return {
            icoFile: null,
            imageUrl: '',
            qiniuToken: ''
        }
    },
    methods: {
        // 获取上传的文件对象
        onIcoUploadChange(file, fileList) {
            this.icoFile = file
            // 创建一个本地blob链接用于图片预览
            this.imageUrl = URL.createObjectURL(file.raw)
        },
        // 上传文件到七牛
        async upload() {
            if (this.icoFile === null) {
                this.$message.error('请先上传文件')
                return
            }

            // 判断token是否为空
            if (this.qiniuToken === '') {
                try {
                const { data } = await getQiniuToken()
                this.qiniuToken = data
                } catch (err) {
                this.$message.error(err.message)
                return
                }
            }

            let fileKey = ''

            try {
                const formData = new FormData()
                formData.append('file', this.icoFile)
                formData.append('token', this.qiniuToken)
                const { key } = await uploadImg2Qiniu(formData)
                fileKey = key
                // 发送请求 将key存到数据库
                // ...
            } catch (err) {
                this.$message.error(err.message)
            }
        }
    }
}
&lt;/script&gt;

&lt;style lang=&quot;scss&quot; scope&gt;
$icoSize: 64px;

.icon-uploader .el-upload {
  width: $icoSize;
  height: $icoSize;
  position: relative;
  overflow: hidden;
  border: 1px dashed #d9d9d9;
  border-radius: 6px;
  cursor: pointer;
  position: relative;
  overflow: hidden;

  &amp;:hover {
    border-color: #409eff;
  }
}

.icon-uploader .ico {
  width: $icoSize;
  height: $icoSize;
}

.icon-uploader .el-upload .el-icon-plus {
  width: $icoSize;
  height: $icoSize;
  font-size: 20px;
  color: #8c939d;
  line-height: $icoSize;
  text-align: center;
}
&lt;/style&gt;
</code></pre>
<p>获取token及上传图片</p>
<pre><code class="language-js">import request from '@/utils/request'

// 获取后端生成的token
export function getQiniuToken() {
  return request({
    url: '/qntoken',
    method: 'GET'
  })
}

export function uploadImg2Qiniu(formdata) {
  return request({
    // 该api从七牛获取, 不同地域的存储桶对应api不同
    url: process.env.VUE_APP_QINIU_UPLOAD_API, 
    method: 'POST',
    headers: {
      'Content-Type': 'multipart/form-data'
    },
    withCredentials: false, // 禁止跨域携带cookie，带cookie在七牛上有可能出现跨域问题
    timeout: 30000,
    data: formdata
  })
}
</code></pre>
]]></content>
    </entry>
</feed>